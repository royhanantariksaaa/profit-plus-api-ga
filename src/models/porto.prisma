// Database configuration properties
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Database model mapping
model product {
  productId Int @id @default(autoincrement())
  units units @relation(fields: [unitId], references: [unitId])
  taxonomy taxonomy @relation(fields: [taxonomyId], references: [taxonomyId])
  category category @relation(fields: [categoryId], references: [categoryId])
  categoryId Int // Foreign Key of category
  taxonomyId Int // Foreign key of taxonomy
  unitId Int // Foreign key of unit
  year Int
  name String
  branding String // store the directory of branding file
  evidenceTariff String // Store the directory of tariff file
  evidenceProduct String // Store the directory of product's evidence file
  playbook String // Store the directory of product's playbook file
  productProfile String
  isActive Boolean
  progressEnum progressEnum @default(aquisition)
  stpdb stpdb[] // 1 to many relation with stpdb
  productServices productServices[] // 1 to many relation with productServices
  productUseCase productUseCase[] // 1 to many relation with productUseCase
  operatingModel operatingModel[] // 1 to many relation with operatingModel
  segmentTargeting segmentTargeting[] // 1 to many relation with segmentTargeting
}

model units {
  unitId Int @id @default(autoincrement())
  users users[] // 1 to many relation with users
  unitLeader unitLeader?  // 1 to 1 relation with unitLeader
  product product[] // 1 to many relation with product
  name String @unique
}

model users {
  userId Int @id @default(autoincrement())
  unitLeader unitLeader?  // 1 to 1 relation with unitLeader
  units units @relation(fields: [unitId], references: [unitId])  // 1 to 1 relation with units
  levels levels @relation(fields: [levelId], references: [levelId]) // 1 to 1 relation with levels
  loginCredentials loginCredentials @relation(fields: [loginCredentialsId], references: [loginCredentialsId]) // 1 to 1 relation with loginCredentials
  teams teams @relation(fields: [teamId], references: [teamId]) // 1 to 1 relation with teams
  unitId Int // foreign key of units
  levelId Int  // foreign key of levels
  loginCredentialsId String @unique // foreign key of loginCredentials
  teamId Int //  Foreign key of teams
}

model loginCredentials {
  loginCredentialsId String @id @default(uuid())
  users users?
  RefreshToken RefreshToken[]
  email String
  password String
}

model teams {
  teamId Int @id @default(autoincrement())
  users users[]  //   1 to many relation with users
  teamName String @unique
}

model RefreshToken {
  id String @id @unique @default(uuid())
  hashedToken String
  userId String
  loginCredentials loginCredentials @relation(fields: [loginCredentialsId], references: [loginCredentialsId], onDelete: Cascade)
  loginCredentialsId String
  revoked Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add new entity named unitLeader
model unitLeader {
  leaderId Int @id @default(autoincrement())
  users users @relation(fields: [userId], references: [userId])
  units units @relation(fields: [unitId], references: [unitId])
  userId Int @unique //  Foreign key of user
  unitId Int @unique // Foreign key of unit
}

model levels {
  levelId Int @id @default(autoincrement())
  users users[]
  name String @unique
}

model taxonomy {
  taxonomyId Int @id @default(autoincrement())
  product product[] // 1 to many relation with product
  name String
  taxonomyDesc String
}

model category {
  categoryId Int @id @default(autoincrement())
  product product[] // 1 to many relation with product
  name String
  categoryDesc String
}

enum progressEnum {
  aquisition
  activation
  retention
  referral
  revenue
}

model differentiation {
  difId Int @id @default(autoincrement())
  difEnablerCollection difEnablerCollection[] //  1 to many relation with difEnablerCollection
  stpdb stpdb[]
  content String
  context String
}

model difEnablerCollection {
  difEnablerCollectionId Int @id @default(autoincrement())
  pointDescription String
  differentiation differentiation @relation(fields: [difId], references: [difId])
  difId Int // Foreign Key of differentiation
}

model stpdb {
  stpdbId Int @id @default(autoincrement())
  product product @relation(fields: [productId], references: [productId])
  differentiation differentiation @relation(fields: [difId], references: [difId])
  productId Int //  Foreign key of product
  difId Int  //  Foreign key of differentiation
  branding String //  Store the directory of product's branding image
  positioningDescription String
  segmentTargeting segmentTargeting[] // 1 to many relation with segmentTargeting
  stPositioning stPositioning[] // 1 to many relation with stPositioning
}

model productServices {
  psId Int @id @default(autoincrement())
  product product @relation(fields: [productId], references: [productId])
  productId Int
  name String
  description String
}

model productUseCase {
  pucId Int @id @default(autoincrement())
  product product @relation(fields: [productId], references: [productId])
  productId Int
  logo String //  Stores the directory of logo file
  desc String
}

model operatingModel {
  omId Int @id @default(autoincrement())
  product product @relation(fields: [productId], references: [productId])
  productId Int
  partnership String
  omBusinessFlow omBusinessFlow[]  // 1 to many relation with omBusinessflow
  omSupplier omSupplier[] // 1 to many relation with omSupplier
  omLocation omLocation[] // 1 to many relation with omLocation
  omMgtSystems omMgtSystems[] // 1 to many relation with omMgtsystems
  omInformation omInformation[] // 1 to many relation with omInformation
}

model omBusinessFlow {
  ombfId Int @id @default(autoincrement())
  operatingModel operatingModel @relation(fields: [omId], references: [omId])
  omBusFlowNode omBusFlowNode[] // 1 to many relation with omBusFlowNode
  omId Int // Foreign Key of operatingModel
  operator String
}

model omSupplier {
  omsId Int @id @default(autoincrement())
  operatingModel operatingModel @relation(fields: [omId], references: [omId])
  omId Int // Foreign Key of operatingModel
  name String
  description String
}

model omLocation {
  omlId Int @id @default(autoincrement())
  operatingModel operatingModel @relation(fields: [omId], references: [omId])
  omId Int // Foreign Key of operatingModel
  location String
}

model omMgtSystems {
  ommsId Int @id @default(autoincrement())
  operatingModel operatingModel @relation(fields: [omId], references: [omId])
  omId Int // Foreign Key of operatingModel
  name String
}

model omInformation {
  omiId Int @id @default(autoincrement())
  operatingModel operatingModel @relation(fields: [omId], references: [omId])
  omId Int // Foreign Key of operatingModel
  scope String
  omInfoNode omInfoNode[] // 1 to many relation with omInformation 
}

model omBusFlowNode {
  ombfnId Int @id @default(autoincrement())
  omBusinessFlow omBusinessFlow @relation(fields: [ombfId], references: [ombfId])
  ombfId Int // Foreign Key of omBusinessFlow
  desc String
  position Int
}

model omInfoNode {
  ominId Int @id @default(autoincrement())
  omInformation omInformation @relation(fields: [omiId], references: [omiId])
  omiId Int  // Foreign Key of omInformation
  description String
}

model segmentTargeting {
  stId Int @id @default(autoincrement())
  product product @relation(fields: [productId], references: [productId])
  stpdb stpdb @relation(fields: [stpdbId], references: [stpdbId])
  productId Int  // Foreign Key of product
  stpdbId Int  // Foreign Key of stpdb
  desc String
  stFutureGrowth stFutureGrowth[] // 1 to many relation with stFutureGrowth 
  stTargetingUser stTargetingUser[] // 1 to many relation with stTargetingUser 
}

model stPositioning {
  stPos Int @id @default(autoincrement())
  stpdb stpdb @relation(fields: [stpdbId], references: [stpdbId])
  stpdbId Int  // Foreign Key of stpdb
  logo String // Store the directory of logo's file 
  x Int // Define the coordinate position of logo (x-axis) 
  y Int // Define the coordinate position of logo (y-axis)
}

model stFutureGrowth {
  stfgId Int @id @default(autoincrement())
  segmentTargeting segmentTargeting @relation(fields: [stId], references: [stId])
  stId Int // Foreign Key of segmentTargeting
  user String
}

model stTargetingUser {
  sttuId Int @id @default(autoincrement())
  segmentTargeting segmentTargeting @relation(fields: [stId], references: [stId])
  stId Int // Foreign Key of segmentTargeting
  user String
}